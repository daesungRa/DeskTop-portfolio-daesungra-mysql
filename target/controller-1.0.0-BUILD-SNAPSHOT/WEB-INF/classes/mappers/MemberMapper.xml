<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="member">
	<!-- dboard 테이블의 blob 형식의 컬럼을 위한 resultMap 정의 -->
	<resultMap type='com.daesungra.domain.BoardVo' id='getBoardVoIncludeBlobType'>
		<!-- dboard -->
		<result property='serial' column='serial' />
		<result property='bookNo' column='bookNo' />
		<result property='title' column='title' />
		<result property='content' column='content' jdbcType='BLOB' javaType='java.lang.String' />
		<result property='category' column='category' />
		<result property='userId' column='userId' />
		<result property='bDate' column='bDate' />
		<result property='hit' column='hit' />
		<result property='gSerial' column='gSerial' />
		<result property='pSerial' column='pSerial' />
		<result property='depth' column='depth' />
		<result property='indent' column='indent' />
		<result property='isDelete' column='isDelete' />
		<result property='isBlocked' column='isBlocked' />
		<!-- dbook -->
		<result property='title_kor' column='title_kor' />
		<result property='title_eng' column='title_eng' />
		<result property='introduce' column='introduce' />
		<result property='author' column='author' />
		<result property='publisher' column='publisher' />
		<result property='country' column='country' />
		<result property='coverImg' column='coverImg' />
		<result property='pDate' column='pDate' />
		<!-- thumbUpCnt -->
		<result property='thumbUpCnt' column='thumbUpCnt' />
	</resultMap>
	
	<!--
		login
			- 로그인 성공 시 아이디, 이름, 권한수준을 세션에 세팅함
			- 블럭 상태라면 로그인 거부
	-->
	<select id="selectMemberLogin" parameterType="com.daesungra.domain.MemberVo" resultType="com.daesungra.domain.MemberVo">
		SELECT mem.userId, mem.userName, dadmin.authority, mem.isBlocked
			FROM DMEMBER mem JOIN DADMIN dadmin
			ON mem.userId = dadmin.userId
			WHERE mem.userId = #{userId} and mem.userPwd = #{userPwd} and mem.isDelete = 0
	</select>
	<select id="selectSalt" parameterType="String" resultType="String">
		SELECT saltData from DMEMBER_SALT WHERE userId = #{userId}
	</select>
	
	<!--
		join
			- 관리자 권한은 기본 0 으로 등록됨. 추후 수퍼관리자가 추가 권한 부여
	-->
	<select id="idCheck" parameterType="String" resultType="String">
		SELECT userId FROM DMEMBER WHERE userId = #{userId}
	</select>
	<insert id="memberInsert" parameterType="com.daesungra.domain.MemberVo">
		INSERT INTO DMEMBER (userId, userPwd, userName, email, phone, postal, address, addressAdd, photo, photoOri, mDate, isDelete)
			VALUES (#{userId}, #{userPwd}, #{userName}, #{email}, #{phone}, #{postal}, #{address}, #{addressAdd}, #{photo}, #{photoOri}, CURRENT_TIMESTAMP, 0)
	</insert>
	<insert id='memberAuth' parameterType='String'>
		INSERT INTO DADMIN (userId, authority)
			VALUES (#{_parameter}, 0)
	</insert>
	<insert id="profileInsert" parameterType="String">
		INSERT INTO DMEMBER_PROFILE (userId, introduce, interest, isPublic, nickName)
			VALUES (#{userId}, '', '', 0, '')
	</insert>
	<insert id="saltInsert" parameterType="com.daesungra.domain.MemberSaltVo">
		INSERT INTO DMEMBER_SALT VALUES (#{userId}, #{saltData})
	</insert>
	
	<!--
		member view (info, profile)
	-->
	<select id="selectMemberView" parameterType="String" resultType="com.daesungra.domain.MemberVo">
		SELECT m.userId userId, m.userName userName, m.email email, m.phone phone, m.postal postal, m.address address, m.addressAdd addressAdd, m.photo photo, m.photoOri photoOri,
				DATE_FORMAT(m.mDate, '%Y%m%d %H:%i:%s') mDate, p.nickName nickName, p.introduce introduce, p.interest interest, p.isPublic isPublic, (select count(*) from DMEMBER_FOLLOWER where followee = #{userId}) fNum
			FROM DMEMBER m JOIN DMEMBER_PROFILE p
				ON m.userId = p.userId
			WHERE m.userId = #{userId} and m.isDelete = 0
	</select>
	<select id="selectFollowees" parameterType="String" resultType="com.daesungra.domain.MemberVo">
		SELECT mf.followee userId, mb.photo photo,
				pf.nickName nickName, pf.introduce introduce, pf.interest interest
			FROM DMEMBER_FOLLOWER mf JOIN DMEMBER mb
				ON mf.followee = mb.userId
				JOIN DMEMBER_PROFILE pf
				ON mf.followee = pf.userId
			WHERE mf.userId = #{userId}
	</select>
	<select id="selectExistingMemberList">
		SELECT userId, userName, email, phone, postal, address, addressAdd, photo, photoOri, DATE_FORMAT(mDate, '%Y-%m-%d %H:%i:%s') mDate
			FROM DMEMBER
			WHERE isDelete = 0
	</select>
	
	<!--
		update
	-->
	<select id="getPhoto" parameterType="String" resultType="String">
		SELECT photo FROM DMEMBER WHERE userId = #{_parameter}
	</select>
	<update id="memberUpdate" parameterType="com.daesungra.domain.MemberVo">
		UPDATE DMEMBER SET userName = #{userName}, email = #{email}, phone = #{phone}, postal = #{postal}, address = #{address}, addressAdd = #{addressAdd},
			photo = #{photo}, photoOri = #{photoOri}
			WHERE userId = #{userId} and userPwd = #{userPwd} and isDelete = 0
	</update>
	<update id="updatePhoto" parameterType="com.daesungra.domain.MemberVo">
		UPDATE DMEMBER SET photo = #{photo}, photoOri = #{photoOri}
			WHERE userId = #{userId}
	</update>
	<update id="profileUpdate" parameterType="com.daesungra.domain.MemberVo">
		UPDATE DMEMBER_PROFILE SET nickName = #{nickName}, interest = #{interest}, introduce = #{introduce}, isPublic = #{isPublic}
			WHERE userId = #{userId}
	</update>
	
	<!--
		delete
	-->
	<update id="memberDelete" parameterType="com.daesungra.domain.MemberVo">
		UPDATE DMEMBER SET isDelete = 1 WHERE userId = #{userId} and userPwd = #{userPwd}
	</update>
	<delete id="memberDeleteConfirm" parameterType="com.daesungra.domain.MemberVo">
		DELETE FROM DMEMBER WHERE userId = #{userId} and userPwd = #{userPwd}
	</delete>
	
	<!-- 
		get my board list
	 -->
	<select id='getMyBoardList' parameterType='String' resultType='com.daesungra.domain.BoardVo'>
		SELECT bd.serial serial, bd.userId userId, bd.category category, bd.title title, bd.content content, DATE_FORMAT(bd.bDate, '%Y.%m.%d') bDate, bd.hit hit, bd.isBlocked isBlocked,
				(SELECT COUNT(*) FROM DBOARD_COMMENT cmt JOIN DBOARD bd2 ON cmt.fSerial = bd2.serial WHERE bd2.serial = bd.serial) commentCnt,
				(SELECT COUNT(*) FROM DBOARD_THUMBUP bdt JOIN DBOARD bd3 ON bdt.pSerial = bd3.serial WHERE bd3.serial = bd.serial) thumbUpCnt,
				bk.title_kor title_kor, bk.title_eng title_eng, bk.coverImg coverImg, bk.author author, bk.pDate pDate
			FROM DBOARD bd JOIN DBOOK bk
				ON bd.bookNo = bk.bookNo
			WHERE bd.userId = #{_parameter} AND bd.isDelete = 0
			ORDER BY bd.bDate desc
	</select>
	
	<!-- 
		get writer list
	 -->
	<select id='getWriterList' resultType='com.daesungra.domain.MemberVo'>
		SELECT s.* FROM (
			SELECT mb.userId userId, mb.userName userName, mb.photo photo,
					mp.nickName nickName, mp.interest interest,
					(select count(*) from DMEMBER_FOLLOWER where followee = mb.userId) fNum,
					(SELECT COUNT(*) FROM DBOARD bd JOIN DMEMBER mb2 ON bd.userId = mb2.userId WHERE mb2.userId = mb.userId) boardCnt,
					(SELECT COUNT(*) FROM DBOARD_THUMBUP bdt JOIN DBOARD bd ON bdt.pSerial = bd.serial WHERE bd.userId = mb.userId) thumbUpCnt
				FROM DMEMBER mb JOIN DMEMBER_PROFILE mp
					ON mb.userId = mp.userId
				ORDER BY (select count(*) from DMEMBER_FOLLOWER where followee = mb.userId) desc, mDate desc
			) s
		LIMIT 0, 3
	</select>
	<!-- 
		get writer info
	 -->
	<select id='selectWriterInfo' parameterType='map' resultType='com.daesungra.domain.MemberVo'>
		SELECT mb.userId userId, mb.userName userName, mb.photo photo, mb.email email, mb.phone phone,
				mp.nickName nickName, mp.introduce introduce, mp.interest interest,
				(select count(*) FROM DMEMBER_FOLLOWER WHERE followee = mb.userId) fNum,
				(SELECT COUNT(*) FROM DMEMBER_FOLLOWER WHERE userId = #{follower} AND followee = #{followee}) isFollow,
				(SELECT COUNT(*) FROM DBOARD bd JOIN DMEMBER mb2 ON bd.userId = mb2.userId WHERE mb2.userId = mb.userId) boardCnt,
				(SELECT COUNT(*) FROM DBOARD_THUMBUP bdt JOIN DBOARD bd ON bdt.pSerial = bd.serial WHERE bd.userId = mb.userId) thumbUpCnt
			FROM DMEMBER mb JOIN DMEMBER_PROFILE mp
				ON mb.userId = mp.userId
			WHERE mb.userId = #{followee}
	</select>
	
	<!-- 
		follow action
	 -->
	<insert id='followAction' parameterType='map'>
		INSERT INTO DMEMBER_FOLLOWER (userId, followee)
			VALUES (#{follower}, #{followee})
	</insert>
	<!-- 
		unFollow action
	 -->
	<insert id='unFollowAction' parameterType='map'>
		DELETE FROM DMEMBER_FOLLOWER
			WHERE userId = #{follower} AND followee = #{followee}
	</insert>
</mapper>